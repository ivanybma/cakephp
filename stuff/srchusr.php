

<?php
class pagectl // this class is to contain the page control information generated by rtv class function and back to frontend
{
public $prepage=0;   // new previous page after the current new page is shown 
public $nxtpage=0;   // new next page after the current new page is shown
public $abc="";// this is just for showing the php inert value through javascript frontend for testing usage
}
// rtv is a web paging control class
// function triggered by ajax, POST method
// Input encoded JSON data, Output encoded JSON data
// Input parameter: 
// 1. database host name 2. database name 3. database user 4. database access pwd 5. page max entry number 
// 6. table for accessing 7. field name for searching 8. field value for searching (now only support searching by one field)
// 9. current page before this function processing(the first time call this function, pls input -2 that means no any page has ever shown)
//10. selection criteria (the statement after "where")
// Output parameter:
// 1. Nxtpage --- for frontend to use in the "next" button 
// 2. Prepage --- for frontend to use in the "previous" button
// 3. result set with volume extracted basing on the max entries per page defined by user
class rtv
{
public $con=" ";
public $table=" ";
public $sql=" ";
public $rst=" ";
public $rtn=array();
public $host="localhost";
public $usr="ivan";
public $pwd="440103";
public $db="ivan";
public $max=3;
public $inppage;

function connect($dba)
{
//prepare the user function list
 $this->con=mysqli_connect($this->host,$this->db,$this->pwd,$this->usr);
 // Check connection
 if (mysqli_connect_errno()) 
 return "no";
 else
 return "yes";
}

function get()
{
$abc="test";  //testing
if($this->inppage <> -2) // variable page sent from caller is the page number that being shown to user before calling this function
//check if "page" parameter is passed, if some value is passed, that means it is from the first page shown, 
//if it is -1, it means this is the first time search button is pressed
       // page is passed, that means user at least finish one page browsing
{       
   $local_page = $this->inppage + 1; //calculate the coming page number(this number means the one which will be shown this time)
   $local_offset = $this->max * $local_page ;  //calculate the no. of first record to be shown in this new page
   $abc=$this->inppage;   //testing
}
else   // No page is passed, that means user now is browsing the first page
{
$local_page=0;    // do remember that the first page will come with a page number =0(no page before),  
$local_offset=0; // record selection will begin from the first record in file.
$abc=$this->inppage; //testing
}

$local_sql="select count(*) from ".$this->table." where ".$this->sql;
$local_rst=mysqli_query($this->con,$local_sql);

$local_rcd = mysqli_fetch_array($local_rst, MYSQL_NUM);  
$local_total=$local_rcd[0];                  //get the total record number of a file
$local_remain=$local_total-($local_page*$this->max);     //calculate the number of record still not yet display at this moment(before showing the current new page)


if ($local_remain > $this->max)//that means there is somemore records after this new page(making assumpeion that this page is full)
$nxtpage=$local_page;
else
{$nxtpage=-2;}

if ($local_page==0)
$prepage=-2;
else 
{
$prepage=$local_page-2;
}

// $ctr='{"nxtpage":'.$nxtpage. ',"prepage":'.$prepage.'}'; this is the encoded JSON format, so if we format it like this,
//then we should not use json_encode before sending back.
// to prepare the non-encoded json, we need to use array or object to format it.
$ctr=new pagectl;
$ctr->nxtpage=$nxtpage;
$ctr->prepage=$prepage;
$ctr->test=$abc;  //testing
//$ctr->nxtpage=$local_remain;
//$ctr->prepage=$this->max;
array_push($this->rtn,$ctr);

$local_sql="select * from ".$this->table." where ".$this->sql . " limit ".$local_offset.", ".$this->max; //select designated number of record after the end of prior page

//need to understand a thing, if we need to store the object to array, we first need to create the object instant
// and format it, then apply it to the array, if we want to add some more new object to this array, 
//we need to rebuild a new instant of the object and format it accordingly instead of just change the value of the prior one.
$this->rst=mysqli_query($this->con,$local_sql);
if(!$this->rst)
return "no record";
while($this->rcd=mysqli_fetch_array($this->rst))  /*loop the authority group result set*/
{
array_push($this->rtn,$this->rcd);
}


}

}

//header('Content-type: application/json');
$key_field=$_POST["key_field"];
$key_value=$_POST["key_value"];
//$key_field="id";
//$key_value="26";

$obj= new rtv;
$obj->table="persons";
$obj->sql=$key_field. " like '%".$key_value."%'";
$obj->inppage=$_POST["page"];
$aa=$obj->connect("");
$bb=$obj->get();
//print_r($obj->rtn);
echo json_encode($obj->rtn); 
?>